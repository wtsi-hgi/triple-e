#!/bin/bash

# Triple-E: Docker and Docker Machine wrapper scripts for Mac OS X

# Christopher Harrison
# Human Genetics Informatics, Wellcome Trust Sanger Institute

# GPLv3 or later
# Copyright (c) 2014, 2015 Genome Research Limited

set -eu -o pipefail

D=docker
DM=docker-machine

usage() {
  cat <<-EOF
	Usage: source $(basename "$0") [command]
	
	Commands:
	  ahoy      Start Docker host (if not already running)
	  avast     Stop active Docker host
	  yarr      Display the Docker host status and list running containers
	  keelhaul  Kill all running containers on the active host
	  scuttle   Stop and remove all running containers and remove all images
	EOF
}

stderr() {
  >&2 echo "$@"
}

try_fail() {
  # This is a "try...catch" analogue, where failed commands will be
  # caught and the script will terminate with a non-trivial exit code.
  # Note that we have to use `script` to fool docker-machine that it's
  # in a TTY; unfortunately, BSD `script` (a la Mac OS X) is different
  # to GNU `script`, making this non-portable :(
  local message=$1
  local cmd=${@:2}

  echo -n "$message... "
  script -q /dev/null $cmd &>/dev/null && echo "Done!" \
                                       || { echo "Failed!"; exit 1; }
}

check_cmd() {
  local cmd=$1
  local name=$2

  if ! command -v $cmd &>/dev/null; then
    stderr "$name is not installed!"
    exit 1
  fi
}

host_active() {
  $DM active
}

host_status() {
  local machine=$1
  $DM status $machine
}

host_ip() {
  local machine=$1
  $DM ip $machine
}

host_envs() {
  local machine=$1

  # FIXME You cannot affect the environment of the parent :(
  # eval "$($DM env $MACHINE)"
  
  # One could get around this by ensuring this script is sourced (i.e.,
  # `source 3e [command]`), but then we have to be careful about what we
  # we do with the host shell (e.g., no calls to `exit`). Alternatively,
  # one could enter into a subshell, which is Docker-aware, similar to a
  # Python virtualenv...

  stderr "Please run the following: eval \"\$($DM env $machine)\""
}

host_start() {
  local machine=$1
  try_fail "Starting \"$machine\" Docker machine" \
           $DM start $machine
}

# Spin up a Docker machine and set the environment in kind
full_ahead() {
  # Acquire an active host
  local active

  if ! active=$(host_active 2>/dev/null); then
    case $(($($DM ls -q | wc -l))) in
      0)
        # No machines defined: Create one, on demand
        while true; do
          read -p "Nary a Docker machines sails here, do ye want to create a VirtualBox default? " yn
          case $yn in
            [Yy]*)
              active="default"
              try_fail "Creating Docker machine" \
                       $DM create -d virtualbox $active
              break
              ;;

            [Nn]*)
              exit
              ;;

            *)
              echo "...Be it \"yey\" or \"nay\", landlubber?"
              ;;
          esac
        done
        ;;

      1)
        # One machine
        active=$($DM ls -q | head -1)
        if [[ $(host_status $active) == "Stopped" ]]; then
          host_start $active
        fi
        ;;

      *)
        # If there are lots of machines, prioritise the running
        # VirtualBox instances named "default"
        active=$($DM ls | awk -F' +' '
          NR > 1 {
            weight = 0;
            if ($1 == "default") weight++;
            if ($3 == "virtualbox") weight++;
            if ($4 == "Running") weight++;
            print weight "\t" $1;
          }
        ' | sort -nr | head -1 | cut -f2)
        ;;
    esac

    # Start machine, if necessary
    if [[ $(host_status $active) == "Stopped" ]]; then
      host_start $active
    fi
  fi

  # Set environment variables
  host_envs $active

  local ip=$(host_ip $active)
  echo "Docker machine \"$active\" be afloat on $ip"
}

# Stop active Docker machine
all_stop() {
  local active

  if active=$(host_active 2>/dev/null); then
    try_fail "Puttin' Docker machine \"$active\" into dry dock" \
             $DM stop $active
  fi
}

# Docker machine and container status
steady_as_she_goes() {
  local active

  if ! active=$(host_active 2>/dev/null); then
    echo "No Docker machines be sailin'"
    return
  fi

  local ip=$(host_ip $active)
  echo "Docker machine \"$active\" be afloat on $ip"

  if [ -n "$($D ps -q)" ]; then
    echo 
    $D ps
  else
    # i.e., No running containers
    echo "...yet she be the Mary Celeste"
  fi
}

# Stop and remove all running containers and remove all images
walk_the_plank() {
  if host_active &>/dev/null; then
    local ps=$($D ps -aq)
    local img=$($D images -q)
 
    if [ -n "$ps" ]; then
      try_fail "All stop for running containers" \
               $D stop $ps
      try_fail "Scuttlin' all containers" \
               $D rm $ps
    fi
 
    if [ -n "$img" ]; then
      try_fail "Scuttlin' all images" \
               $D rmi --force $img
    fi
  fi
}

# Kill all running containers on the active host
the_white_whale() {
  if host_active &>/dev/null; then
    local ps=$($D ps -aq)
    if [ -n "$ps" ]; then
      try_fail "Keelhaulin' all running containers" \
               $D kill $ps
    fi
  fi
}

main() {
  # Check binaries exist
  check_cmd $D  "Docker"
  check_cmd $DM "The Docker Machine"

  # Command line option delegation
  local args=$1
  case $args in
    "ahoy")
      full_ahead
      ;;

    "avast")
      all_stop
      ;;

    "keelhaul")
      the_white_whale
      ;;

    "scuttle")
      walk_the_plank
      ;;

    "yarr")
      # A somewhat conspicuous Easter Egg!
      if [ $(date "+%m%d") == "0919" ]; then
        echo "Hahaarr, matey! Ye be a scurvy dog!"
      fi
      steady_as_she_goes
      ;;

    *)
      usage
      exit 1
      ;;
  esac
}

main "${1:-}"
